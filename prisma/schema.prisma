generator client {
  provider = "prisma-client-js"
  seed     = "node prisma/seed.js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String
  email                 String             @unique
  emailVerified         DateTime?
  image                 String?
  hashedPassword        String
  createdAt             DateTime           @default(now())
  privacyPolicyAccepted Boolean            @default(false)
  role                  Role               @default(USER)
  termsAccepted         Boolean            @default(false)
  archived              Boolean            @default(false)
  recoveryToken         String?
  preferences           Json?
  lastLogin             DateTime?
  account               Account[]
  activity              Activity[]
  alert                 Alert[]
  apiKey                ApiKey[]
  audit                 Audit[]
  contact               Contact[]
  logEntry              LogEntry[]
  ownedOrganizations    Organization[]
  organizations         OrganizationUser[]
  session               Session[]
}

model Account {
  userId            String    @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         DateTime?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([provider, providerAccountId])
}

model Session {
  id                    String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String        @db.Uuid
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  currentOrganizationId String?       @db.Uuid
  currentOrganization   Organization? @relation(fields: [currentOrganizationId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Organization {
  id            String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  type          OrganizationType
  ownerId       String                 @db.Uuid
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  deletedAt     DateTime?
  isDeleted     Boolean                @default(false)
  isActive      Boolean                @default(true)
  isVerified    Boolean                @default(false)
  isArchived    Boolean                @default(false)
  planId        String                 @db.Uuid
  planStartDate DateTime?
  planEndDate   DateTime?
  planStatus    OrganizationPlanStatus @default(ACTIVE)
  activity      Activity[]
  contacts      Contact[]
  equipments    Equipment[]
  locations     Location[]
  logEntry      LogEntry[]
  owner         User                   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plan          Plan                   @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         OrganizationUser[]
  sessions      Session[]
  vendors       Vendor[]
}

model Vendor {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Plan {
  id            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  description   String
  price         Float
  isActive      Boolean        @default(true)
  isDeleted     Boolean        @default(false)
  features      String[]       @default([])
  trialDays     Int?
  savings       Float?
  requiresCard  Boolean        @default(true)
  isPopular     Boolean        @default(false)
  isCustom      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[]
}

model OrganizationUser {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organizationId String       @db.Uuid
  userId         String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  isDeleted      Boolean      @default(false)
  isActive       Boolean      @default(true)
  isVerified     Boolean      @default(false)
  isArchived     Boolean      @default(false)
  role           Role         @default(USER)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, organizationId])
}

model Activity {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  resourceId     String
  activityType   ActivityType
  activityDate   DateTime
  ts_created     DateTime     @default(now())
  ts_updated     DateTime     @updatedAt
  ts_deleted     DateTime?
  byUserId       String       @db.Uuid
  organizationId String       @db.Uuid
  byUser         User         @relation(fields: [byUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Alert {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type           AlertType
  byUserId       String    @db.Uuid
  organizationId String    @db.Uuid
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  byUser         User      @relation(fields: [byUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model ApiKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Audit {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  action       Action
  description  String
  resourceType ResourceType
  occurredAt   DateTime     @default(now())
  userId       String       @db.Uuid
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Contact {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String       @db.Uuid
  organizationId String       @db.Uuid
  firstName      String
  lastName       String
  email          String
  phone          String
  verified       Boolean      @default(false)
  archived       Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locations      Location[]
}

model Location {
  id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  address        String
  city           String
  state          String
  zip            String
  country        String
  contactId      String       @db.Uuid
  organizationId String       @db.Uuid
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  equipments     Equipment[]
  contact        Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  logEntry       LogEntry[]
}

model Equipment {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name            String
  type            EquipmentType
  archived        Boolean               @default(false)
  serialNumber    String
  modelNumber     String
  refrigerantType String
  nickname        String
  description     String
  locationId      String                @db.Uuid
  organizationId  String                @db.Uuid
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  location        Location              @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization    Organization          @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  designInfo      EquipmentDesignInfo[]
  logEntry        LogEntry[]
}

model EquipmentDesignInfo {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  equipmentId           String                  @db.Uuid
  designType            EquipmentDesignInfoType
  designTypeDescription String
  designValue           String
  checklist             Boolean                 @default(true)
  equipment             Equipment               @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  logEntry              LogEntry[]
}

model LogEntry {
  id                    String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workOrderId           String
  archived              Boolean             @default(false)
  organizationId        String              @db.Uuid
  locationId            String              @db.Uuid
  equipmentId           String              @db.Uuid
  equipmentDesignInfoId String              @db.Uuid
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  conclusion            String
  action                Action
  technicianId          String              @db.Uuid
  notes                 String
  images                String[]
  video                 String
  audio                 String
  pdf                   String
  verified              Boolean             @default(false)
  locked                Boolean             @default(false)
  lockedByUserId        String              @db.Uuid
  lockTS                DateTime?
  costAnalysis          String
  equipmentDesignInfo   EquipmentDesignInfo @relation(fields: [equipmentDesignInfoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  equipment             Equipment           @relation(fields: [equipmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  location              Location            @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization          Organization        @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  technician            User                @relation(fields: [technicianId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  upload                Upload[]
}

model Upload {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  logEntryId   String       @db.Uuid
  file         String
  fileName     String
  fileType     String
  fileSize     Int
  fileUrl      String
  resourceType ResourceType
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  logEntry     LogEntry     @relation(fields: [logEntryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model CaseStudy {
  id         Int                 @id @default(autoincrement())
  title      String
  slug       String              @unique
  content    String
  createdAt  DateTime            @default(now())
  updatedAt  DateTime            @updatedAt
  industries CaseStudyIndustry[]
}

model Industry {
  id          Int                 @id @default(autoincrement())
  name        String
  slug        String              @unique
  content     String
  caseStudies CaseStudyIndustry[]
  solutions   IndustrySolution[]
}

model IndustrySolution {
  id         Int      @id @default(autoincrement())
  industryId Int
  content    String
  industry   Industry @relation(fields: [industryId], references: [id])
}

model CaseStudyIndustry {
  id          Int       @id @default(autoincrement())
  caseStudyId Int
  industryId  Int
  caseStudy   CaseStudy @relation(fields: [caseStudyId], references: [id])
  industry    Industry  @relation(fields: [industryId], references: [id])
}

model RequestDemo {
  id                Int      @id @default(autoincrement())
  name              String
  email             String
  phone             String?
  numberOfEmployees Int?
  organizationName  String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum ActivityType {
  VIEW
  CREATE
  UPDATE
  DELETE
  SUBMIT
  LOG
}

enum Role {
  ROOT
  ADMINISTRATOR
  MANAGER
  SUPERVISOR
  TECHNICIAN
  DISPATCHER
  ESTIMATOR
  CUSTOMER
  USER
}

enum OrganizationPlan {
  FREE
  TRIAL
  BASIC
  PRO
  ENTERPRISE
}

enum ResourceType {
  USER
  ORGANIZATION
  LOCATION
  EQUIPMENT
  LOG_ENTRY
  ALERT
  API_KEY
  AUDIT
}

enum OrganizationPlanStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum AlertType {
  USER_ALERT
  USER_CREATION_ALERT
  USER_DELETION_ALERT
  ORGANIZATION_ALERT
  ORGANIZATION_CREATION_ALERT
  ORGANIZATION_DELETION_ALERT
  LOCATION_ALERT
  LOCATION_CREATION_ALERT
  LOCATION_DELETION_ALERT
  EQUIPMENT_ALERT
  EQUIPMENT_CREATION_ALERT
  EQUIPMENT_DELETION_ALERT
  LOG_ENTRY_ALERT
  LOG_ENTRY_CREATION_ALERT
  LOG_ENTRY_DELETION_ALERT
  LOG_ENTRY_UPDATE_ALERT
  LOG_ENTRY_MESSAGE_ALERT
  LOG_ENTRY_ERROR_ALERT
  LOG_ENTRY_WARNING_ALERT
  PERFORMANCE_ALERT
}

enum Action {
  VIEW
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  FORGOT_PASSWORD
}

enum OrganizationType {
  VENDOR
  CUSTOMER
}

enum EquipmentDesignInfoType {
  Evaporator
  Condenser
  Motor
  Compressor
  Expansion_Valve
  Fan
  Cooling_Tower
  Pump
  Other
}

enum EquipmentType {
  AIR_COOLED_CHILLER
  WATER_COOLED_CHILLER
  COOLING_TOWER
  MRI_CHILLER
  HOT_WATER_BOILER
  OTHER
}
